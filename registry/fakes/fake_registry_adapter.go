// This file was generated by counterfeiter
package fakes

import (
	"sync"

	consul_api "github.com/hashicorp/consul/api"
	"gitlab.vailsys.com/vail-cloud-services/platform/registry"
)

type FakeRegistryAdapter struct {
	RegisterStub        func(service registry.ServiceRegistration) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		service registry.ServiceRegistration
	}
	registerReturns struct {
		result1 error
	}
	DeRegisterStub        func(service registry.ServiceRegistration) error
	deRegisterMutex       sync.RWMutex
	deRegisterArgsForCall []struct {
		service registry.ServiceRegistration
	}
	deRegisterReturns struct {
		result1 error
	}
	SyncStub        func(service registry.ServiceRegistration) error
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
		service registry.ServiceRegistration
	}
	syncReturns struct {
		result1 error
	}
	PingStub        func() error
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns struct {
		result1 error
	}
	StatusStub        func() int
	statusMutex       sync.RWMutex
	statusArgsForCall []struct{}
	statusReturns struct {
		result1 int
	}
	DisconnectedStub        func() bool
	disconnectedMutex       sync.RWMutex
	disconnectedArgsForCall []struct{}
	disconnectedReturns struct {
		result1 bool
	}
	TypeStub        func() string
	typeMutex       sync.RWMutex
	typeArgsForCall []struct{}
	typeReturns struct {
		result1 string
	}
	FindServiceStub        func(name, tag string) ([]*consul_api.CatalogService, error)
	findServiceMutex       sync.RWMutex
	findServiceArgsForCall []struct {
		name string
		tag  string
	}
	findServiceReturns struct {
		result1 []*consul_api.CatalogService
		result2 error
	}
	FindServicesStub        func() (map[string][]string, error)
	findServicesMutex       sync.RWMutex
	findServicesArgsForCall []struct{}
	findServicesReturns struct {
		result1 map[string][]string
		result2 error
	}
	CheckServiceStub        func(name, tag string, passing bool) ([]*consul_api.ServiceEntry, error)
	checkServiceMutex       sync.RWMutex
	checkServiceArgsForCall []struct {
		name    string
		tag     string
		passing bool
	}
	checkServiceReturns struct {
		result1 []*consul_api.ServiceEntry
		result2 error
	}
}

func (fake *FakeRegistryAdapter) Register(service registry.ServiceRegistration) error {
	fake.registerMutex.Lock()
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		service registry.ServiceRegistration
	}{service})
	fake.registerMutex.Unlock()
	if fake.RegisterStub != nil {
		return fake.RegisterStub(service)
	} else {
		return fake.registerReturns.result1
	}
}

func (fake *FakeRegistryAdapter) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeRegistryAdapter) RegisterArgsForCall(i int) registry.ServiceRegistration {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return fake.registerArgsForCall[i].service
}

func (fake *FakeRegistryAdapter) RegisterReturns(result1 error) {
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistryAdapter) DeRegister(service registry.ServiceRegistration) error {
	fake.deRegisterMutex.Lock()
	fake.deRegisterArgsForCall = append(fake.deRegisterArgsForCall, struct {
		service registry.ServiceRegistration
	}{service})
	fake.deRegisterMutex.Unlock()
	if fake.DeRegisterStub != nil {
		return fake.DeRegisterStub(service)
	} else {
		return fake.deRegisterReturns.result1
	}
}

func (fake *FakeRegistryAdapter) DeRegisterCallCount() int {
	fake.deRegisterMutex.RLock()
	defer fake.deRegisterMutex.RUnlock()
	return len(fake.deRegisterArgsForCall)
}

func (fake *FakeRegistryAdapter) DeRegisterArgsForCall(i int) registry.ServiceRegistration {
	fake.deRegisterMutex.RLock()
	defer fake.deRegisterMutex.RUnlock()
	return fake.deRegisterArgsForCall[i].service
}

func (fake *FakeRegistryAdapter) DeRegisterReturns(result1 error) {
	fake.DeRegisterStub = nil
	fake.deRegisterReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistryAdapter) Sync(service registry.ServiceRegistration) error {
	fake.syncMutex.Lock()
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
		service registry.ServiceRegistration
	}{service})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		return fake.SyncStub(service)
	} else {
		return fake.syncReturns.result1
	}
}

func (fake *FakeRegistryAdapter) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeRegistryAdapter) SyncArgsForCall(i int) registry.ServiceRegistration {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return fake.syncArgsForCall[i].service
}

func (fake *FakeRegistryAdapter) SyncReturns(result1 error) {
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistryAdapter) Ping() error {
	fake.pingMutex.Lock()
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub()
	} else {
		return fake.pingReturns.result1
	}
}

func (fake *FakeRegistryAdapter) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeRegistryAdapter) PingReturns(result1 error) {
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRegistryAdapter) Status() int {
	fake.statusMutex.Lock()
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct{}{})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub()
	} else {
		return fake.statusReturns.result1
	}
}

func (fake *FakeRegistryAdapter) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeRegistryAdapter) StatusReturns(result1 int) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeRegistryAdapter) Disconnected() bool {
	fake.disconnectedMutex.Lock()
	fake.disconnectedArgsForCall = append(fake.disconnectedArgsForCall, struct{}{})
	fake.disconnectedMutex.Unlock()
	if fake.DisconnectedStub != nil {
		return fake.DisconnectedStub()
	} else {
		return fake.disconnectedReturns.result1
	}
}

func (fake *FakeRegistryAdapter) DisconnectedCallCount() int {
	fake.disconnectedMutex.RLock()
	defer fake.disconnectedMutex.RUnlock()
	return len(fake.disconnectedArgsForCall)
}

func (fake *FakeRegistryAdapter) DisconnectedReturns(result1 bool) {
	fake.DisconnectedStub = nil
	fake.disconnectedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRegistryAdapter) Type() string {
	fake.typeMutex.Lock()
	fake.typeArgsForCall = append(fake.typeArgsForCall, struct{}{})
	fake.typeMutex.Unlock()
	if fake.TypeStub != nil {
		return fake.TypeStub()
	} else {
		return fake.typeReturns.result1
	}
}

func (fake *FakeRegistryAdapter) TypeCallCount() int {
	fake.typeMutex.RLock()
	defer fake.typeMutex.RUnlock()
	return len(fake.typeArgsForCall)
}

func (fake *FakeRegistryAdapter) TypeReturns(result1 string) {
	fake.TypeStub = nil
	fake.typeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRegistryAdapter) FindService(name string, tag string) ([]*consul_api.CatalogService, error) {
	fake.findServiceMutex.Lock()
	fake.findServiceArgsForCall = append(fake.findServiceArgsForCall, struct {
		name string
		tag  string
	}{name, tag})
	fake.findServiceMutex.Unlock()
	if fake.FindServiceStub != nil {
		return fake.FindServiceStub(name, tag)
	} else {
		return fake.findServiceReturns.result1, fake.findServiceReturns.result2
	}
}

func (fake *FakeRegistryAdapter) FindServiceCallCount() int {
	fake.findServiceMutex.RLock()
	defer fake.findServiceMutex.RUnlock()
	return len(fake.findServiceArgsForCall)
}

func (fake *FakeRegistryAdapter) FindServiceArgsForCall(i int) (string, string) {
	fake.findServiceMutex.RLock()
	defer fake.findServiceMutex.RUnlock()
	return fake.findServiceArgsForCall[i].name, fake.findServiceArgsForCall[i].tag
}

func (fake *FakeRegistryAdapter) FindServiceReturns(result1 []*consul_api.CatalogService, result2 error) {
	fake.FindServiceStub = nil
	fake.findServiceReturns = struct {
		result1 []*consul_api.CatalogService
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryAdapter) FindServices() (map[string][]string, error) {
	fake.findServicesMutex.Lock()
	fake.findServicesArgsForCall = append(fake.findServicesArgsForCall, struct{}{})
	fake.findServicesMutex.Unlock()
	if fake.FindServicesStub != nil {
		return fake.FindServicesStub()
	} else {
		return fake.findServicesReturns.result1, fake.findServicesReturns.result2
	}
}

func (fake *FakeRegistryAdapter) FindServicesCallCount() int {
	fake.findServicesMutex.RLock()
	defer fake.findServicesMutex.RUnlock()
	return len(fake.findServicesArgsForCall)
}

func (fake *FakeRegistryAdapter) FindServicesReturns(result1 map[string][]string, result2 error) {
	fake.FindServicesStub = nil
	fake.findServicesReturns = struct {
		result1 map[string][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryAdapter) CheckService(name string, tag string, passing bool) ([]*consul_api.ServiceEntry, error) {
	fake.checkServiceMutex.Lock()
	fake.checkServiceArgsForCall = append(fake.checkServiceArgsForCall, struct {
		name    string
		tag     string
		passing bool
	}{name, tag, passing})
	fake.checkServiceMutex.Unlock()
	if fake.CheckServiceStub != nil {
		return fake.CheckServiceStub(name, tag, passing)
	} else {
		return fake.checkServiceReturns.result1, fake.checkServiceReturns.result2
	}
}

func (fake *FakeRegistryAdapter) CheckServiceCallCount() int {
	fake.checkServiceMutex.RLock()
	defer fake.checkServiceMutex.RUnlock()
	return len(fake.checkServiceArgsForCall)
}

func (fake *FakeRegistryAdapter) CheckServiceArgsForCall(i int) (string, string, bool) {
	fake.checkServiceMutex.RLock()
	defer fake.checkServiceMutex.RUnlock()
	return fake.checkServiceArgsForCall[i].name, fake.checkServiceArgsForCall[i].tag, fake.checkServiceArgsForCall[i].passing
}

func (fake *FakeRegistryAdapter) CheckServiceReturns(result1 []*consul_api.ServiceEntry, result2 error) {
	fake.CheckServiceStub = nil
	fake.checkServiceReturns = struct {
		result1 []*consul_api.ServiceEntry
		result2 error
	}{result1, result2}
}

var _ registry.RegistryAdapter = new(FakeRegistryAdapter)
